// Generated by gencpp from file yolox_ros_wrapper_msgs/YoloxDetectedObject.msg
// DO NOT EDIT!


#ifndef YOLOX_ROS_WRAPPER_MSGS_MESSAGE_YOLOXDETECTEDOBJECT_H
#define YOLOX_ROS_WRAPPER_MSGS_MESSAGE_YOLOXDETECTEDOBJECT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace yolox_ros_wrapper_msgs
{
template <class ContainerAllocator>
struct YoloxDetectedObject_
{
  typedef YoloxDetectedObject_<ContainerAllocator> Type;

  YoloxDetectedObject_()
    : class_name()
    , class_id(0)
    , score(0.0)
    , x0(0)
    , x1(0)
    , y0(0)
    , y1(0)
    , image_width(0)
    , image_height(0)  {
    }
  YoloxDetectedObject_(const ContainerAllocator& _alloc)
    : class_name(_alloc)
    , class_id(0)
    , score(0.0)
    , x0(0)
    , x1(0)
    , y0(0)
    , y1(0)
    , image_width(0)
    , image_height(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _class_name_type;
  _class_name_type class_name;

   typedef int32_t _class_id_type;
  _class_id_type class_id;

   typedef float _score_type;
  _score_type score;

   typedef int32_t _x0_type;
  _x0_type x0;

   typedef int32_t _x1_type;
  _x1_type x1;

   typedef int32_t _y0_type;
  _y0_type y0;

   typedef int32_t _y1_type;
  _y1_type y1;

   typedef int32_t _image_width_type;
  _image_width_type image_width;

   typedef int32_t _image_height_type;
  _image_height_type image_height;





  typedef boost::shared_ptr< ::yolox_ros_wrapper_msgs::YoloxDetectedObject_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yolox_ros_wrapper_msgs::YoloxDetectedObject_<ContainerAllocator> const> ConstPtr;

}; // struct YoloxDetectedObject_

typedef ::yolox_ros_wrapper_msgs::YoloxDetectedObject_<std::allocator<void> > YoloxDetectedObject;

typedef boost::shared_ptr< ::yolox_ros_wrapper_msgs::YoloxDetectedObject > YoloxDetectedObjectPtr;
typedef boost::shared_ptr< ::yolox_ros_wrapper_msgs::YoloxDetectedObject const> YoloxDetectedObjectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yolox_ros_wrapper_msgs::YoloxDetectedObject_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yolox_ros_wrapper_msgs::YoloxDetectedObject_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::yolox_ros_wrapper_msgs::YoloxDetectedObject_<ContainerAllocator1> & lhs, const ::yolox_ros_wrapper_msgs::YoloxDetectedObject_<ContainerAllocator2> & rhs)
{
  return lhs.class_name == rhs.class_name &&
    lhs.class_id == rhs.class_id &&
    lhs.score == rhs.score &&
    lhs.x0 == rhs.x0 &&
    lhs.x1 == rhs.x1 &&
    lhs.y0 == rhs.y0 &&
    lhs.y1 == rhs.y1 &&
    lhs.image_width == rhs.image_width &&
    lhs.image_height == rhs.image_height;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::yolox_ros_wrapper_msgs::YoloxDetectedObject_<ContainerAllocator1> & lhs, const ::yolox_ros_wrapper_msgs::YoloxDetectedObject_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace yolox_ros_wrapper_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::yolox_ros_wrapper_msgs::YoloxDetectedObject_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yolox_ros_wrapper_msgs::YoloxDetectedObject_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yolox_ros_wrapper_msgs::YoloxDetectedObject_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yolox_ros_wrapper_msgs::YoloxDetectedObject_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yolox_ros_wrapper_msgs::YoloxDetectedObject_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yolox_ros_wrapper_msgs::YoloxDetectedObject_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yolox_ros_wrapper_msgs::YoloxDetectedObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "44c56aadd6a52be9f308b0035f12dded";
  }

  static const char* value(const ::yolox_ros_wrapper_msgs::YoloxDetectedObject_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x44c56aadd6a52be9ULL;
  static const uint64_t static_value2 = 0xf308b0035f12ddedULL;
};

template<class ContainerAllocator>
struct DataType< ::yolox_ros_wrapper_msgs::YoloxDetectedObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yolox_ros_wrapper_msgs/YoloxDetectedObject";
  }

  static const char* value(const ::yolox_ros_wrapper_msgs::YoloxDetectedObject_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yolox_ros_wrapper_msgs::YoloxDetectedObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string                                              class_name\n"
"int32                                               class_id\n"
"float32                                             score\n"
"int32                                               x0\n"
"int32                                               x1\n"
"int32                                               y0\n"
"int32                                               y1\n"
"int32                                               image_width\n"
"int32                                               image_height\n"
;
  }

  static const char* value(const ::yolox_ros_wrapper_msgs::YoloxDetectedObject_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yolox_ros_wrapper_msgs::YoloxDetectedObject_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.class_name);
      stream.next(m.class_id);
      stream.next(m.score);
      stream.next(m.x0);
      stream.next(m.x1);
      stream.next(m.y0);
      stream.next(m.y1);
      stream.next(m.image_width);
      stream.next(m.image_height);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct YoloxDetectedObject_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yolox_ros_wrapper_msgs::YoloxDetectedObject_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yolox_ros_wrapper_msgs::YoloxDetectedObject_<ContainerAllocator>& v)
  {
    s << indent << "class_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.class_name);
    s << indent << "class_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.class_id);
    s << indent << "score: ";
    Printer<float>::stream(s, indent + "  ", v.score);
    s << indent << "x0: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x0);
    s << indent << "x1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x1);
    s << indent << "y0: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y0);
    s << indent << "y1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y1);
    s << indent << "image_width: ";
    Printer<int32_t>::stream(s, indent + "  ", v.image_width);
    s << indent << "image_height: ";
    Printer<int32_t>::stream(s, indent + "  ", v.image_height);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YOLOX_ROS_WRAPPER_MSGS_MESSAGE_YOLOXDETECTEDOBJECT_H
